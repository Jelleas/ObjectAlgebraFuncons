scope(accum(cl_base,
cl_library),
  accum(map_union(scope_nominal_coercion(variants(map1('E1', tuple_type_empty)), bound_type(nameid('builtin', id('exn'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('E1'),
        nomval(bound_value(meta('nom_tag')), variant('E1', tuple_empty))), bind_value(nameid('variant_selector', id('E1')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), map_union(scope_nominal_coercion(variants(map1('E2', tuple_type_empty)), bound_type(nameid('builtin', id('exn'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('E2'),
        nomval(bound_value(meta('nom_tag')), variant('E2', tuple_empty))), bind_value(nameid('variant_selector', id('E2')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), scope_nominal_coercion(variants(map1('E3', tuple_type_empty)), bound_type(nameid('builtin', id('exn'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('E3'),
        nomval(bound_value(meta('nom_tag')), variant('E3', tuple_empty))), bind_value(nameid('variant_selector', id('E3')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))))),
  accum(seq(print(scope(generalise_decl(recursive_typed(map_union(map1(id('f'), depends(bound_type(nameid('type', id('int'))), bound_type(nameid('type', id('bool'))))), map1(id('g'), depends(bound_type(nameid('type', id('char'))), bound_type(nameid('type', id('string')))))),
    map_union(match(prefer_over(close(patt_abs(bind(id('x')),
      apply(instantiate_if_poly(follow_if_fwd(bound_value(id('raise')))),
        instantiate_if_poly(bound_value(id('E1')))))),
      abs(throw(cl_match_failure))), prefer_over(patt_at_type(bind(id('f')),
      depends(bound_type(nameid('type', id('int'))), bound_type(nameid('type', id('bool'))))),
      abs(throw(cl_match_failure)))), match(prefer_over(close(patt_abs(bind(id('x')),
      apply(instantiate_if_poly(follow_if_fwd(bound_value(id('raise')))),
        instantiate_if_poly(bound_value(id('E2')))))),
      abs(throw(cl_match_failure))), prefer_over(patt_at_type(bind(id('g')),
      depends(bound_type(nameid('type', id('char'))), bound_type(nameid('type', id('string'))))),
      abs(throw(cl_match_failure))))))),
    apply(instantiate_if_poly(follow_if_fwd(bound_value(id('raise')))),
      instantiate_if_poly(bound_value(id('E3')))))),
  map_empty),
  map_empty)))