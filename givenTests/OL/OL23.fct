scope(accum(cl_base,
cl_library),
  accum(accum(typedef(nameid('type', id('expression')), newtype('expression')),
  accum(map_empty,
  map_union(scope_nominal_coercion(variants(map1('Const', bound_type(nameid('type', id('float'))))), bound_type(nameid('type', id('expression'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('Const'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('Const', given))))), bind_value(nameid('variant_selector', id('Const')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), map_union(scope_nominal_coercion(variants(map1('Var', bound_type(nameid('type', id('string'))))), bound_type(nameid('type', id('expression'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('Var'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('Var', given))))), bind_value(nameid('variant_selector', id('Var')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), map_union(scope_nominal_coercion(variants(map1('Sum', tuple_type2(bound_type(nameid('type', id('expression'))), bound_type(nameid('type', id('expression')))))), bound_type(nameid('type', id('expression'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('Sum'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('Sum', given))))), bind_value(nameid('variant_selector', id('Sum')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), map_union(scope_nominal_coercion(variants(map1('Diff', tuple_type2(bound_type(nameid('type', id('expression'))), bound_type(nameid('type', id('expression')))))), bound_type(nameid('type', id('expression'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('Diff'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('Diff', given))))), bind_value(nameid('variant_selector', id('Diff')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), map_union(scope_nominal_coercion(variants(map1('Prod', tuple_type2(bound_type(nameid('type', id('expression'))), bound_type(nameid('type', id('expression')))))), bound_type(nameid('type', id('expression'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('Prod'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('Prod', given))))), bind_value(nameid('variant_selector', id('Prod')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), scope_nominal_coercion(variants(map1('Quot', tuple_type2(bound_type(nameid('type', id('expression'))), bound_type(nameid('type', id('expression')))))), bound_type(nameid('type', id('expression'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('Quot'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('Quot', given))))), bind_value(nameid('variant_selector', id('Quot')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given)))))))))))))),
  accum(scope_nominal_coercion(variants(map1('Not_found', tuple_type_empty)), bound_type(nameid('builtin', id('exn'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('Not_found'),
        nomval(bound_value(meta('nom_tag')), variant('Not_found', tuple_empty))), bind_value(nameid('variant_selector', id('Not_found')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))),
  accum(generalise_decl(recursive_typed(map1(id('assoc'), depends(typevar('a'), depends(instantiate_type(bound_type(nameid('type', id('list'))), list1(tuple_type2(typevar('a'), typevar('b')))), typevar('b')))),
    match(prefer_over(close(patt_abs(bind(id('x')),
      prefer_over(prefer_over(close(patt_abs(only(list_empty),
        apply(instantiate_if_poly(follow_if_fwd(bound_value(id('raise')))),
          instantiate_if_poly(bound_value(id('Not_found')))))),
        close(patt_abs(list_prefix_patt(tuple_prefix_patt(bind(id('y')), tuple_prefix_patt(bind(id('z')), only(tuple_empty))), bind(id('yzs'))),
          if_true(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('prefix =')))),
            instantiate_if_poly(follow_if_fwd(bound_value(id('x'))))),
            instantiate_if_poly(follow_if_fwd(bound_value(id('y'))))),
            instantiate_if_poly(follow_if_fwd(bound_value(id('z')))),
            apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('assoc')))),
              instantiate_if_poly(follow_if_fwd(bound_value(id('x'))))),
              instantiate_if_poly(follow_if_fwd(bound_value(id('yzs'))))))))),
        abs(throw(cl_match_failure))))),
      abs(throw(cl_match_failure))), prefer_over(patt_at_type(bind(id('assoc')),
      depends(typevar('a'), depends(instantiate_type(bound_type(nameid('type', id('list'))), list1(tuple_type2(typevar('a'), typevar('b')))), typevar('b')))),
      abs(throw(cl_match_failure)))))),
  accum(scope_nominal_coercion(variants(map1('Unbound_variable', bound_type(nameid('type', id('string'))))), bound_type(nameid('builtin', id('exn'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('Unbound_variable'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('Unbound_variable', given))))), bind_value(nameid('variant_selector', id('Unbound_variable')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))),
  accum(generalise_decl(recursive_typed(map1(id('eval'), depends(instantiate_type(bound_type(nameid('type', id('list'))), list1(tuple_type2(bound_type(nameid('type', id('string'))), bound_type(nameid('type', id('float')))))), depends(bound_type(nameid('type', id('expression'))), bound_type(nameid('type', id('float')))))),
    match(curry_N(succ(succ(zero)),prefer_over(close(patt_abs(tuple_prefix_patt(bind(id('env')), tuple_prefix_patt(bind(id('exp')), only(tuple_empty))),
      apply(prefer_over(prefer_over(close(patt_abs(abs(variant_match('Const',
        apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Const')))),
          given),
        bind(id('c')))),
        instantiate_if_poly(follow_if_fwd(bound_value(id('c')))))),
        prefer_over(close(patt_abs(abs(variant_match('Var',
          apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Var')))),
            given),
          bind(id('v')))),
          catch_else_rethrow(
            apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('assoc')))),
              instantiate_if_poly(follow_if_fwd(bound_value(id('v'))))),
              instantiate_if_poly(follow_if_fwd(bound_value(id('env'))))),
            restrict_domain(close(patt_abs(abs(variant_match('Not_found',
              apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Not_found')))),
                given),
              only(tuple_empty))),
              apply(instantiate_if_poly(follow_if_fwd(bound_value(id('raise')))),
                apply(instantiate_if_poly(bound_value(id('Unbound_variable'))),
                  instantiate_if_poly(follow_if_fwd(bound_value(id('v')))))))),
              bound_type(nameid('builtin', id('exn'))))))),
          prefer_over(close(patt_abs(abs(variant_match('Sum',
            apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Sum')))),
              given),
            tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
            apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('prefix +.')))),
              apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('eval')))),
                instantiate_if_poly(follow_if_fwd(bound_value(id('env'))))),
                instantiate_if_poly(follow_if_fwd(bound_value(id('f')))))),
              apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('eval')))),
                instantiate_if_poly(follow_if_fwd(bound_value(id('env'))))),
                instantiate_if_poly(follow_if_fwd(bound_value(id('g')))))))),
            prefer_over(close(patt_abs(abs(variant_match('Diff',
              apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Diff')))),
                given),
              tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
              apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('prefix -.')))),
                apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('eval')))),
                  instantiate_if_poly(follow_if_fwd(bound_value(id('env'))))),
                  instantiate_if_poly(follow_if_fwd(bound_value(id('f')))))),
                apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('eval')))),
                  instantiate_if_poly(follow_if_fwd(bound_value(id('env'))))),
                  instantiate_if_poly(follow_if_fwd(bound_value(id('g')))))))),
              prefer_over(close(patt_abs(abs(variant_match('Prod',
                apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Prod')))),
                  given),
                tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
                apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('prefix *.')))),
                  apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('eval')))),
                    instantiate_if_poly(follow_if_fwd(bound_value(id('env'))))),
                    instantiate_if_poly(follow_if_fwd(bound_value(id('f')))))),
                  apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('eval')))),
                    instantiate_if_poly(follow_if_fwd(bound_value(id('env'))))),
                    instantiate_if_poly(follow_if_fwd(bound_value(id('g')))))))),
                close(patt_abs(abs(variant_match('Quot',
                  apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Quot')))),
                    given),
                  tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
                  apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('prefix /.')))),
                    apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('eval')))),
                      instantiate_if_poly(follow_if_fwd(bound_value(id('env'))))),
                      instantiate_if_poly(follow_if_fwd(bound_value(id('f')))))),
                    apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('eval')))),
                      instantiate_if_poly(follow_if_fwd(bound_value(id('env'))))),
                      instantiate_if_poly(follow_if_fwd(bound_value(id('g'))))))))))))),
        abs(throw(cl_match_failure))),
        instantiate_if_poly(follow_if_fwd(bound_value(id('exp'))))))),
      abs(throw(cl_match_failure)))), prefer_over(patt_at_type(bind(id('eval')),
      depends(instantiate_type(bound_type(nameid('type', id('list'))), list1(tuple_type2(bound_type(nameid('type', id('string'))), bound_type(nameid('type', id('float')))))), depends(bound_type(nameid('type', id('expression'))), bound_type(nameid('type', id('float')))))),
      abs(throw(cl_match_failure)))))),
  accum(generalise_decl(recursive_typed(map1(id('deriv'), depends(bound_type(nameid('type', id('expression'))), depends(bound_type(nameid('type', id('string'))), bound_type(nameid('type', id('expression')))))),
    match(curry_N(succ(succ(zero)),prefer_over(close(patt_abs(tuple_prefix_patt(bind(id('exp')), tuple_prefix_patt(bind(id('dv')), only(tuple_empty))),
      apply(prefer_over(prefer_over(close(patt_abs(abs(variant_match('Const',
        apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Const')))),
          given),
        bind(id('c')))),
        apply(instantiate_if_poly(bound_value(id('Const'))),
          0.0))),
        prefer_over(close(patt_abs(abs(variant_match('Var',
          apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Var')))),
            given),
          bind(id('v')))),
          if_true(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('prefix =')))),
            instantiate_if_poly(follow_if_fwd(bound_value(id('v'))))),
            instantiate_if_poly(follow_if_fwd(bound_value(id('dv'))))),
            apply(instantiate_if_poly(bound_value(id('Const'))),
              1.0),
            apply(instantiate_if_poly(bound_value(id('Const'))),
              0.0)))),
          prefer_over(close(patt_abs(abs(variant_match('Sum',
            apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Sum')))),
              given),
            tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
            apply(instantiate_if_poly(bound_value(id('Sum'))),
              tuple_prefix(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('deriv')))),
                instantiate_if_poly(follow_if_fwd(bound_value(id('f'))))),
                instantiate_if_poly(follow_if_fwd(bound_value(id('dv'))))),
                tuple_prefix(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('deriv')))),
                  instantiate_if_poly(follow_if_fwd(bound_value(id('g'))))),
                  instantiate_if_poly(follow_if_fwd(bound_value(id('dv'))))),
                  tuple_empty))))),
            prefer_over(close(patt_abs(abs(variant_match('Diff',
              apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Diff')))),
                given),
              tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
              apply(instantiate_if_poly(bound_value(id('Diff'))),
                tuple_prefix(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('deriv')))),
                  instantiate_if_poly(follow_if_fwd(bound_value(id('f'))))),
                  instantiate_if_poly(follow_if_fwd(bound_value(id('dv'))))),
                  tuple_prefix(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('deriv')))),
                    instantiate_if_poly(follow_if_fwd(bound_value(id('g'))))),
                    instantiate_if_poly(follow_if_fwd(bound_value(id('dv'))))),
                    tuple_empty))))),
              prefer_over(close(patt_abs(abs(variant_match('Prod',
                apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Prod')))),
                  given),
                tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
                apply(instantiate_if_poly(bound_value(id('Sum'))),
                  tuple_prefix(apply(instantiate_if_poly(bound_value(id('Prod'))),
                    tuple_prefix(instantiate_if_poly(follow_if_fwd(bound_value(id('f')))),
                      tuple_prefix(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('deriv')))),
                        instantiate_if_poly(follow_if_fwd(bound_value(id('g'))))),
                        instantiate_if_poly(follow_if_fwd(bound_value(id('dv'))))),
                        tuple_empty))),
                    tuple_prefix(apply(instantiate_if_poly(bound_value(id('Prod'))),
                      tuple_prefix(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('deriv')))),
                        instantiate_if_poly(follow_if_fwd(bound_value(id('f'))))),
                        instantiate_if_poly(follow_if_fwd(bound_value(id('dv'))))),
                        tuple_prefix(instantiate_if_poly(follow_if_fwd(bound_value(id('g')))),
                          tuple_empty))),
                      tuple_empty))))),
                close(patt_abs(abs(variant_match('Quot',
                  apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Quot')))),
                    given),
                  tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
                  apply(instantiate_if_poly(bound_value(id('Quot'))),
                    tuple_prefix(apply(instantiate_if_poly(bound_value(id('Diff'))),
                      tuple_prefix(apply(instantiate_if_poly(bound_value(id('Prod'))),
                        tuple_prefix(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('deriv')))),
                          instantiate_if_poly(follow_if_fwd(bound_value(id('f'))))),
                          instantiate_if_poly(follow_if_fwd(bound_value(id('dv'))))),
                          tuple_prefix(instantiate_if_poly(follow_if_fwd(bound_value(id('g')))),
                            tuple_empty))),
                        tuple_prefix(apply(instantiate_if_poly(bound_value(id('Prod'))),
                          tuple_prefix(instantiate_if_poly(follow_if_fwd(bound_value(id('f')))),
                            tuple_prefix(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('deriv')))),
                              instantiate_if_poly(follow_if_fwd(bound_value(id('g'))))),
                              instantiate_if_poly(follow_if_fwd(bound_value(id('dv'))))),
                              tuple_empty))),
                          tuple_empty))),
                      tuple_prefix(apply(instantiate_if_poly(bound_value(id('Prod'))),
                        tuple_prefix(instantiate_if_poly(follow_if_fwd(bound_value(id('g')))),
                          tuple_prefix(instantiate_if_poly(follow_if_fwd(bound_value(id('g')))),
                            tuple_empty))),
                        tuple_empty)))))))))),
        abs(throw(cl_match_failure))),
        instantiate_if_poly(follow_if_fwd(bound_value(id('exp'))))))),
      abs(throw(cl_match_failure)))), prefer_over(patt_at_type(bind(id('deriv')),
      depends(bound_type(nameid('type', id('expression'))), depends(bound_type(nameid('type', id('string'))), bound_type(nameid('type', id('expression')))))),
      abs(throw(cl_match_failure)))))),
  accum(instantiate_poly_decl_if_true(not(true), generalise_decl(match(prefer_over(close(patt_abs(patt_at_type(bind(id('exp')),
    bound_type(nameid('type', id('expression')))),
    scope(generalise_decl(bind_value(id('open_paren'),
      curry_N(succ(succ(zero)),prefer_over(close(patt_abs(tuple_prefix_patt(bind(id('prec')), tuple_prefix_patt(bind(id('op_prec')), only(tuple_empty))),
        if_true(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('prefix >')))),
          instantiate_if_poly(follow_if_fwd(bound_value(id('prec'))))),
          instantiate_if_poly(follow_if_fwd(bound_value(id('op_prec'))))),
          apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print_string')))),
            "("),
          null))),
        abs(throw(cl_match_failure)))))),
      scope(generalise_decl(bind_value(id('close_paren'),
        curry_N(succ(succ(zero)),prefer_over(close(patt_abs(tuple_prefix_patt(bind(id('prec')), tuple_prefix_patt(bind(id('op_prec')), only(tuple_empty))),
          if_true(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('prefix >')))),
            instantiate_if_poly(follow_if_fwd(bound_value(id('prec'))))),
            instantiate_if_poly(follow_if_fwd(bound_value(id('op_prec'))))),
            apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print_string')))),
              ")"),
            null))),
          abs(throw(cl_match_failure)))))),
        scope(generalise_decl(recursive_typed(map1(id('print'), depends(bound_type(nameid('type', id('int'))), depends(bound_type(nameid('type', id('expression'))), bound_type(nameid('type', id('unit')))))),
          match(curry_N(succ(succ(zero)),prefer_over(close(patt_abs(tuple_prefix_patt(bind(id('prec')), tuple_prefix_patt(patt_at_type(bind(id('exp')),
            bound_type(nameid('type', id('expression')))), only(tuple_empty))),
            apply(prefer_over(prefer_over(close(patt_abs(abs(variant_match('Const',
              apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Const')))),
                given),
              bind(id('c')))),
              apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print_float')))),
                instantiate_if_poly(follow_if_fwd(bound_value(id('c'))))))),
              prefer_over(close(patt_abs(abs(variant_match('Var',
                apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Var')))),
                  given),
                bind(id('v')))),
                apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print_string')))),
                  instantiate_if_poly(follow_if_fwd(bound_value(id('v'))))))),
                prefer_over(close(patt_abs(abs(variant_match('Sum',
                  apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Sum')))),
                    given),
                  tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
                  seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('open_paren')))),
                    instantiate_if_poly(follow_if_fwd(bound_value(id('prec'))))),
                    0)),
                  seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print')))),
                    0),
                    instantiate_if_poly(follow_if_fwd(bound_value(id('f')))))),
                  seq(effect(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print_string')))),
                    " + ")),
                  seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print')))),
                    0),
                    instantiate_if_poly(follow_if_fwd(bound_value(id('g')))))),
                  apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('close_paren')))),
                    instantiate_if_poly(follow_if_fwd(bound_value(id('prec'))))),
                    0))))))),
                  prefer_over(close(patt_abs(abs(variant_match('Diff',
                    apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Diff')))),
                      given),
                    tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
                    seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('open_paren')))),
                      instantiate_if_poly(follow_if_fwd(bound_value(id('prec'))))),
                      0)),
                    seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print')))),
                      0),
                      instantiate_if_poly(follow_if_fwd(bound_value(id('f')))))),
                    seq(effect(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print_string')))),
                      " - ")),
                    seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print')))),
                      1),
                      instantiate_if_poly(follow_if_fwd(bound_value(id('g')))))),
                    apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('close_paren')))),
                      instantiate_if_poly(follow_if_fwd(bound_value(id('prec'))))),
                      0))))))),
                    prefer_over(close(patt_abs(abs(variant_match('Prod',
                      apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Prod')))),
                        given),
                      tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
                      seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('open_paren')))),
                        instantiate_if_poly(follow_if_fwd(bound_value(id('prec'))))),
                        2)),
                      seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print')))),
                        2),
                        instantiate_if_poly(follow_if_fwd(bound_value(id('f')))))),
                      seq(effect(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print_string')))),
                        " * ")),
                      seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print')))),
                        2),
                        instantiate_if_poly(follow_if_fwd(bound_value(id('g')))))),
                      apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('close_paren')))),
                        instantiate_if_poly(follow_if_fwd(bound_value(id('prec'))))),
                        2))))))),
                      close(patt_abs(abs(variant_match('Quot',
                        apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Quot')))),
                          given),
                        tuple_prefix_patt(bind(id('f')), tuple_prefix_patt(bind(id('g')), only(tuple_empty))))),
                        seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('open_paren')))),
                          instantiate_if_poly(follow_if_fwd(bound_value(id('prec'))))),
                          2)),
                        seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print')))),
                          2),
                          instantiate_if_poly(follow_if_fwd(bound_value(id('f')))))),
                        seq(effect(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print_string')))),
                          " / ")),
                        seq(effect(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print')))),
                          3),
                          instantiate_if_poly(follow_if_fwd(bound_value(id('g')))))),
                        apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('close_paren')))),
                          instantiate_if_poly(follow_if_fwd(bound_value(id('prec'))))),
                          2)))))))))))),
              abs(throw(cl_match_failure))),
              instantiate_if_poly(follow_if_fwd(bound_value(id('exp'))))))),
            abs(throw(cl_match_failure)))), prefer_over(patt_at_type(bind(id('print')),
            depends(bound_type(nameid('type', id('int'))), depends(bound_type(nameid('type', id('expression'))), bound_type(nameid('type', id('unit')))))),
            abs(throw(cl_match_failure)))))),
          apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print')))),
            0),
            instantiate_if_poly(follow_if_fwd(bound_value(id('exp')))))))))),
    abs(throw(cl_match_failure))), prefer_over(bind(id('print_expr')),
    abs(throw(cl_match_failure)))))),
  accum(instantiate_poly_decl_if_true(not(and(and(true, true), true)), generalise_decl(match(typed(apply(instantiate_if_poly(bound_value(id('Sum'))),
    tuple_prefix(apply(instantiate_if_poly(bound_value(id('Prod'))),
      tuple_prefix(apply(instantiate_if_poly(bound_value(id('Const'))),
        2.0),
        tuple_prefix(apply(instantiate_if_poly(bound_value(id('Var'))),
          "x"),
          tuple_empty))),
      tuple_prefix(apply(instantiate_if_poly(bound_value(id('Const'))),
        1.0),
        tuple_empty))),
    bound_type(nameid('type', id('expression')))), prefer_over(bind(id('e')),
    abs(throw(cl_match_failure)))))),
  accum(seq(print(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('eval')))),
    list_prefix(tuple_prefix("x",
      tuple_prefix(1.0,
        tuple_empty)), list_prefix(tuple_prefix("y",
      tuple_prefix(3.14,
        tuple_empty)), list_empty))),
    apply(instantiate_if_poly(bound_value(id('Prod'))),
      tuple_prefix(apply(instantiate_if_poly(bound_value(id('Sum'))),
        tuple_prefix(apply(instantiate_if_poly(bound_value(id('Var'))),
          "x"),
          tuple_prefix(apply(instantiate_if_poly(bound_value(id('Const'))),
            2.0),
            tuple_empty))),
        tuple_prefix(apply(instantiate_if_poly(bound_value(id('Var'))),
          "y"),
          tuple_empty))))),
  map_empty),
  accum(seq(print(apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('deriv')))),
    apply(instantiate_if_poly(bound_value(id('Quot'))),
      tuple_prefix(apply(instantiate_if_poly(bound_value(id('Const'))),
        1.0),
        tuple_prefix(apply(instantiate_if_poly(bound_value(id('Var'))),
          "x"),
          tuple_empty)))),
    "x")),
  map_empty),
  accum(seq(print(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print_expr')))),
    instantiate_if_poly(follow_if_fwd(bound_value(id('e')))))),
  map_empty),
  accum(seq(print(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('print_expr')))),
    apply(apply(instantiate_if_poly(follow_if_fwd(bound_value(id('deriv')))),
      instantiate_if_poly(follow_if_fwd(bound_value(id('e'))))),
      "x"))),
  map_empty),
  map_empty)))))))))))))