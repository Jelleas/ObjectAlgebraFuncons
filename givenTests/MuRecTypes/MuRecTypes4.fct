scope(accum(cl_base,
cl_library),
  accum(accum(map_union(typedef(nameid('type', id('a')), newtype('a')), map_union(typedef(nameid('type', id('b')), newtype('b')), typedef(nameid('type', id('c')), newtype('c')))),
  accum(accum(map_empty,
  accum(map_empty,
  map_empty)),
  map_union(scope_nominal_coercion(variants(map1('B', bound_type(nameid('type', id('b'))))), bound_type(nameid('type', id('a'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('B'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('B', given))))), bind_value(nameid('variant_selector', id('B')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), map_union(map_union(scope_nominal_coercion(variants(map1('A', bound_type(nameid('type', id('a'))))), bound_type(nameid('type', id('b'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('A'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('A', given))))), bind_value(nameid('variant_selector', id('A')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), scope_nominal_coercion(variants(map1('C', bound_type(nameid('type', id('c'))))), bound_type(nameid('type', id('b'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('C'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('C', given))))), bind_value(nameid('variant_selector', id('C')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given)))))))), map_union(scope_nominal_coercion(variants(map1('AA', tuple_type2(bound_type(nameid('type', id('a'))), bound_type(nameid('type', id('a')))))), bound_type(nameid('type', id('c'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('AA'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('AA', given))))), bind_value(nameid('variant_selector', id('AA')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), map_union(scope_nominal_coercion(variants(map1('Bee', bound_type(nameid('type', id('b'))))), bound_type(nameid('type', id('c'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('Bee'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('Bee', given))))), bind_value(nameid('variant_selector', id('Bee')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), map_union(scope_nominal_coercion(variants(map1('Cee', bound_type(nameid('type', id('c'))))), bound_type(nameid('type', id('c'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('Cee'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('Cee', given))))), bind_value(nameid('variant_selector', id('Cee')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), scope_nominal_coercion(variants(map1('End', tuple_type_empty)), bound_type(nameid('type', id('c'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('End'),
        nomval(bound_value(meta('nom_tag')), variant('End', tuple_empty))), bind_value(nameid('variant_selector', id('End')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given)))))))))))))),
  accum(instantiate_poly_decl_if_true(not(true), generalise_decl(match(apply(instantiate_if_poly(bound_value(id('C'))),
    apply(instantiate_if_poly(bound_value(id('Bee'))),
      apply(instantiate_if_poly(bound_value(id('A'))),
        apply(instantiate_if_poly(bound_value(id('B'))),
          apply(instantiate_if_poly(bound_value(id('C'))),
            instantiate_if_poly(bound_value(id('End')))))))), prefer_over(bind(id('x')),
    abs(throw(cl_match_failure)))))),
  accum(seq(print(apply(prefer_over(prefer_over(close(patt_abs(abs(variant_match('A',
    apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('A')))),
      given),
    abs(variant_match('B',
      apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('B')))),
        given),
      abs(variant_match('C',
        apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('C')))),
          given),
        abs(variant_match('End',
          apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('End')))),
            given),
          only(tuple_empty))))))))),
    "WRONG")),
    close(patt_abs(abs(variant_match('C',
      apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('C')))),
        given),
      abs(variant_match('Bee',
        apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('Bee')))),
          given),
        abs(variant_match('A',
          apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('A')))),
            given),
          any)))))),
      "ok"))),
    abs(throw(cl_match_failure))),
    instantiate_if_poly(follow_if_fwd(bound_value(id('x')))))),
  map_empty),
  map_empty))))