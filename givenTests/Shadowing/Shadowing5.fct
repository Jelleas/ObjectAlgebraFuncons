scope(accum(cl_base,
cl_library),
  accum(instantiate_poly_decl_if_true(not(and(true, true)), generalise_decl(match(list_prefix(1, list_empty), prefer_over(bind(id('one')),
    abs(throw(cl_match_failure)))))),
  accum(seq(print(typed(instantiate_if_poly(follow_if_fwd(bound_value(id('one')))),
    instantiate_type(bound_type(nameid('type', id('list'))), list1(bound_type(nameid('type', id('int'))))))),
  map_empty),
  accum(accum(typedef(nameid('type', id('list')), newtype('list')),
  accum(map_empty,
  scope_nominal_coercion(variants(map1('L', tuple_type_empty)), bound_type(nameid('type', id('list'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('L'),
        nomval(bound_value(meta('nom_tag')), variant('L', tuple_empty))), bind_value(nameid('variant_selector', id('L')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))))),
  accum(seq(print(typed(instantiate_if_poly(bound_value(id('L'))),
    bound_type(nameid('type', id('list'))))),
  map_empty),
  accum(instantiate_poly_decl_if_true(not(and(true, true)), generalise_decl(match(list_prefix(2, list_empty), prefer_over(bind(id('two')),
    abs(throw(cl_match_failure)))))),
  accum(seq(print(instantiate_if_poly(follow_if_fwd(bound_value(id('two'))))),
  map_empty),
  map_empty)))))))