scope(accum(cl_base,
cl_library),
  accum(accum(typedef(nameid('type', id('t')), newtype('t')),
  accum(map_empty,
  map_union(scope_nominal_coercion(variants(map1('A', bound_type(nameid('type', id('int'))))), bound_type(nameid('type', id('t'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('A'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('A', given))))), bind_value(nameid('variant_selector', id('A')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given))))))), scope_nominal_coercion(variants(map1('B', bound_type(nameid('type', id('bool'))))), bound_type(nameid('type', id('t'))),
    patt_abs(bind(meta('nom_tag')),
      map_union(bind_value(id('B'),
        close(abs(nomval(bound_value(meta('nom_tag')), variant('B', given))))), bind_value(nameid('variant_selector', id('B')),
        close(abs(nomval_select(bound_value(meta('nom_tag')), given)))))))))),
  accum(seq(print(apply(prefer_over(prefer_over(close(patt_abs(abs(variant_match('B',
    apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('B')))),
      given),
    only(true))),
    "Bad")),
    close(patt_abs(abs(variant_match('A',
      apply(instantiate_if_poly(bound_value(nameid('variant_selector', id('A')))),
        given),
      only(2))),
      "Ok"))),
    abs(throw(cl_match_failure))),
    apply(instantiate_if_poly(bound_value(id('A'))),
      2))),
  map_empty),
  map_empty)))