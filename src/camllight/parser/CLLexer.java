// Generated from  by ANTLR 4.2.2

package camllight.parser;
import static camllight.parser.Tokens.*;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CLLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__38=1, T__37=2, T__36=3, T__35=4, T__34=5, T__33=6, T__32=7, T__31=8, 
		T__30=9, T__29=10, T__28=11, T__27=12, T__26=13, T__25=14, T__24=15, T__23=16, 
		T__22=17, T__21=18, T__20=19, T__19=20, T__18=21, T__17=22, T__16=23, 
		T__15=24, T__14=25, T__13=26, T__12=27, T__11=28, T__10=29, T__9=30, T__8=31, 
		T__7=32, T__6=33, T__5=34, T__4=35, T__3=36, T__2=37, T__1=38, T__0=39, 
		WS=40, NULLTOKEN=41, EMPTYLISTTOKEN=42, WILDCARDTOKEN=43, BOOLTOKEN=44, 
		NUMTOKEN=45, IDTOKEN=46;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'as'", "'fun'", "'||'", "'while'", "';'", "'&&'", "'='", "'for'", "'if'", 
		"'<='", "'&'", "'print'", "'do'", "'('", "'*'", "','", "'->'", "'done'", 
		"'to'", "':'", "'>='", "'<'", "'|'", "'with'", "'>'", "'or'", "'let'", 
		"'match'", "'else'", "'begin'", "'in'", "'function'", "'end'", "')'", 
		"'downto'", "'and'", "'+'", "'then'", "'not'", "WS", "NULLTOKEN", "EMPTYLISTTOKEN", 
		"'_'", "BOOLTOKEN", "NUMTOKEN", "IDTOKEN"
	};
	public static final String[] ruleNames = {
		"T__38", "T__37", "T__36", "T__35", "T__34", "T__33", "T__32", "T__31", 
		"T__30", "T__29", "T__28", "T__27", "T__26", "T__25", "T__24", "T__23", 
		"T__22", "T__21", "T__20", "T__19", "T__18", "T__17", "T__16", "T__15", 
		"T__14", "T__13", "T__12", "T__11", "T__10", "T__9", "T__8", "T__7", "T__6", 
		"T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "WS", "NULLTOKEN", "EMPTYLISTTOKEN", 
		"WILDCARDTOKEN", "BOOLTOKEN", "NUMTOKEN", "IDTOKEN"
	};


	public CLLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return ""; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\60\u011e\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3"+
		"\n\3\n\3\13\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3"+
		"\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3"+
		"\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3"+
		"\31\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3"+
		"\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3#\3#\3$\3$\3"+
		"$\3$\3$\3$\3$\3%\3%\3%\3%\3&\3&\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\6)"+
		"\u00ee\n)\r)\16)\u00ef\3)\3)\3*\3*\7*\u00f6\n*\f*\16*\u00f9\13*\3*\3*"+
		"\3+\3+\7+\u00ff\n+\f+\16+\u0102\13+\3+\3+\3,\3,\3-\3-\3-\3-\3-\3-\3-\3"+
		"-\3-\5-\u0111\n-\3.\6.\u0114\n.\r.\16.\u0115\3/\3/\7/\u011a\n/\f/\16/"+
		"\u011d\13/\2\2\60\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31"+
		"\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65"+
		"\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60\3\2\6\3\2\"\""+
		"\3\2\62;\5\2C\\aac|\6\2\62;C\\aac|\u0123\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3"+
		"\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2"+
		"\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35"+
		"\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)"+
		"\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2"+
		"\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2"+
		"A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3"+
		"\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2"+
		"\2\2[\3\2\2\2\2]\3\2\2\2\3_\3\2\2\2\5b\3\2\2\2\7f\3\2\2\2\ti\3\2\2\2\13"+
		"o\3\2\2\2\rq\3\2\2\2\17t\3\2\2\2\21v\3\2\2\2\23z\3\2\2\2\25}\3\2\2\2\27"+
		"\u0080\3\2\2\2\31\u0082\3\2\2\2\33\u0088\3\2\2\2\35\u008b\3\2\2\2\37\u008d"+
		"\3\2\2\2!\u008f\3\2\2\2#\u0091\3\2\2\2%\u0094\3\2\2\2\'\u0099\3\2\2\2"+
		")\u009c\3\2\2\2+\u009e\3\2\2\2-\u00a1\3\2\2\2/\u00a3\3\2\2\2\61\u00a5"+
		"\3\2\2\2\63\u00aa\3\2\2\2\65\u00ac\3\2\2\2\67\u00af\3\2\2\29\u00b3\3\2"+
		"\2\2;\u00b9\3\2\2\2=\u00be\3\2\2\2?\u00c4\3\2\2\2A\u00c7\3\2\2\2C\u00d0"+
		"\3\2\2\2E\u00d4\3\2\2\2G\u00d6\3\2\2\2I\u00dd\3\2\2\2K\u00e1\3\2\2\2M"+
		"\u00e3\3\2\2\2O\u00e8\3\2\2\2Q\u00ed\3\2\2\2S\u00f3\3\2\2\2U\u00fc\3\2"+
		"\2\2W\u0105\3\2\2\2Y\u0110\3\2\2\2[\u0113\3\2\2\2]\u0117\3\2\2\2_`\7c"+
		"\2\2`a\7u\2\2a\4\3\2\2\2bc\7h\2\2cd\7w\2\2de\7p\2\2e\6\3\2\2\2fg\7~\2"+
		"\2gh\7~\2\2h\b\3\2\2\2ij\7y\2\2jk\7j\2\2kl\7k\2\2lm\7n\2\2mn\7g\2\2n\n"+
		"\3\2\2\2op\7=\2\2p\f\3\2\2\2qr\7(\2\2rs\7(\2\2s\16\3\2\2\2tu\7?\2\2u\20"+
		"\3\2\2\2vw\7h\2\2wx\7q\2\2xy\7t\2\2y\22\3\2\2\2z{\7k\2\2{|\7h\2\2|\24"+
		"\3\2\2\2}~\7>\2\2~\177\7?\2\2\177\26\3\2\2\2\u0080\u0081\7(\2\2\u0081"+
		"\30\3\2\2\2\u0082\u0083\7r\2\2\u0083\u0084\7t\2\2\u0084\u0085\7k\2\2\u0085"+
		"\u0086\7p\2\2\u0086\u0087\7v\2\2\u0087\32\3\2\2\2\u0088\u0089\7f\2\2\u0089"+
		"\u008a\7q\2\2\u008a\34\3\2\2\2\u008b\u008c\7*\2\2\u008c\36\3\2\2\2\u008d"+
		"\u008e\7,\2\2\u008e \3\2\2\2\u008f\u0090\7.\2\2\u0090\"\3\2\2\2\u0091"+
		"\u0092\7/\2\2\u0092\u0093\7@\2\2\u0093$\3\2\2\2\u0094\u0095\7f\2\2\u0095"+
		"\u0096\7q\2\2\u0096\u0097\7p\2\2\u0097\u0098\7g\2\2\u0098&\3\2\2\2\u0099"+
		"\u009a\7v\2\2\u009a\u009b\7q\2\2\u009b(\3\2\2\2\u009c\u009d\7<\2\2\u009d"+
		"*\3\2\2\2\u009e\u009f\7@\2\2\u009f\u00a0\7?\2\2\u00a0,\3\2\2\2\u00a1\u00a2"+
		"\7>\2\2\u00a2.\3\2\2\2\u00a3\u00a4\7~\2\2\u00a4\60\3\2\2\2\u00a5\u00a6"+
		"\7y\2\2\u00a6\u00a7\7k\2\2\u00a7\u00a8\7v\2\2\u00a8\u00a9\7j\2\2\u00a9"+
		"\62\3\2\2\2\u00aa\u00ab\7@\2\2\u00ab\64\3\2\2\2\u00ac\u00ad\7q\2\2\u00ad"+
		"\u00ae\7t\2\2\u00ae\66\3\2\2\2\u00af\u00b0\7n\2\2\u00b0\u00b1\7g\2\2\u00b1"+
		"\u00b2\7v\2\2\u00b28\3\2\2\2\u00b3\u00b4\7o\2\2\u00b4\u00b5\7c\2\2\u00b5"+
		"\u00b6\7v\2\2\u00b6\u00b7\7e\2\2\u00b7\u00b8\7j\2\2\u00b8:\3\2\2\2\u00b9"+
		"\u00ba\7g\2\2\u00ba\u00bb\7n\2\2\u00bb\u00bc\7u\2\2\u00bc\u00bd\7g\2\2"+
		"\u00bd<\3\2\2\2\u00be\u00bf\7d\2\2\u00bf\u00c0\7g\2\2\u00c0\u00c1\7i\2"+
		"\2\u00c1\u00c2\7k\2\2\u00c2\u00c3\7p\2\2\u00c3>\3\2\2\2\u00c4\u00c5\7"+
		"k\2\2\u00c5\u00c6\7p\2\2\u00c6@\3\2\2\2\u00c7\u00c8\7h\2\2\u00c8\u00c9"+
		"\7w\2\2\u00c9\u00ca\7p\2\2\u00ca\u00cb\7e\2\2\u00cb\u00cc\7v\2\2\u00cc"+
		"\u00cd\7k\2\2\u00cd\u00ce\7q\2\2\u00ce\u00cf\7p\2\2\u00cfB\3\2\2\2\u00d0"+
		"\u00d1\7g\2\2\u00d1\u00d2\7p\2\2\u00d2\u00d3\7f\2\2\u00d3D\3\2\2\2\u00d4"+
		"\u00d5\7+\2\2\u00d5F\3\2\2\2\u00d6\u00d7\7f\2\2\u00d7\u00d8\7q\2\2\u00d8"+
		"\u00d9\7y\2\2\u00d9\u00da\7p\2\2\u00da\u00db\7v\2\2\u00db\u00dc\7q\2\2"+
		"\u00dcH\3\2\2\2\u00dd\u00de\7c\2\2\u00de\u00df\7p\2\2\u00df\u00e0\7f\2"+
		"\2\u00e0J\3\2\2\2\u00e1\u00e2\7-\2\2\u00e2L\3\2\2\2\u00e3\u00e4\7v\2\2"+
		"\u00e4\u00e5\7j\2\2\u00e5\u00e6\7g\2\2\u00e6\u00e7\7p\2\2\u00e7N\3\2\2"+
		"\2\u00e8\u00e9\7p\2\2\u00e9\u00ea\7q\2\2\u00ea\u00eb\7v\2\2\u00ebP\3\2"+
		"\2\2\u00ec\u00ee\t\2\2\2\u00ed\u00ec\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef"+
		"\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f2\b)"+
		"\2\2\u00f2R\3\2\2\2\u00f3\u00f7\7*\2\2\u00f4\u00f6\t\2\2\2\u00f5\u00f4"+
		"\3\2\2\2\u00f6\u00f9\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8"+
		"\u00fa\3\2\2\2\u00f9\u00f7\3\2\2\2\u00fa\u00fb\7+\2\2\u00fbT\3\2\2\2\u00fc"+
		"\u0100\7]\2\2\u00fd\u00ff\t\2\2\2\u00fe\u00fd\3\2\2\2\u00ff\u0102\3\2"+
		"\2\2\u0100\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0103\3\2\2\2\u0102"+
		"\u0100\3\2\2\2\u0103\u0104\7_\2\2\u0104V\3\2\2\2\u0105\u0106\7a\2\2\u0106"+
		"X\3\2\2\2\u0107\u0108\7h\2\2\u0108\u0109\7c\2\2\u0109\u010a\7n\2\2\u010a"+
		"\u010b\7u\2\2\u010b\u0111\7g\2\2\u010c\u010d\7v\2\2\u010d\u010e\7t\2\2"+
		"\u010e\u010f\7w\2\2\u010f\u0111\7g\2\2\u0110\u0107\3\2\2\2\u0110\u010c"+
		"\3\2\2\2\u0111Z\3\2\2\2\u0112\u0114\t\3\2\2\u0113\u0112\3\2\2\2\u0114"+
		"\u0115\3\2\2\2\u0115\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116\\\3\2\2\2"+
		"\u0117\u011b\t\4\2\2\u0118\u011a\t\5\2\2\u0119\u0118\3\2\2\2\u011a\u011d"+
		"\3\2\2\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c^\3\2\2\2\u011d"+
		"\u011b\3\2\2\2\t\2\u00ef\u00f7\u0100\u0110\u0115\u011b\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}