// Generated from  by ANTLR 4.2.2

package camllight.parser;
import static camllight.parser.Tokens.*;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CLLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__42=1, T__41=2, T__40=3, T__39=4, T__38=5, T__37=6, T__36=7, T__35=8, 
		T__34=9, T__33=10, T__32=11, T__31=12, T__30=13, T__29=14, T__28=15, T__27=16, 
		T__26=17, T__25=18, T__24=19, T__23=20, T__22=21, T__21=22, T__20=23, 
		T__19=24, T__18=25, T__17=26, T__16=27, T__15=28, T__14=29, T__13=30, 
		T__12=31, T__11=32, T__10=33, T__9=34, T__8=35, T__7=36, T__6=37, T__5=38, 
		T__4=39, T__3=40, T__2=41, T__1=42, T__0=43, WS=44, NULLTOKEN=45, EMPTYLISTTOKEN=46, 
		WILDCARDTOKEN=47, BOOLTOKEN=48, NUMTOKEN=49, IDTOKEN=50;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'as'", "'fun'", "'while'", "'||'", "';'", "'&&'", "'::'", "'='", "'for'", 
		"'if'", "'<='", "'&'", "'print'", "'do'", "'''", "'('", "'*'", "','", 
		"'->'", "'done'", "'to'", "':'", "'>='", "'['", "'<'", "'|'", "'with'", 
		"']'", "'>'", "'or'", "'let'", "'match'", "'else'", "'begin'", "'in'", 
		"'function'", "'end'", "')'", "'downto'", "'and'", "'then'", "'+'", "'not'", 
		"WS", "NULLTOKEN", "EMPTYLISTTOKEN", "'_'", "BOOLTOKEN", "NUMTOKEN", "IDTOKEN"
	};
	public static final String[] ruleNames = {
		"T__42", "T__41", "T__40", "T__39", "T__38", "T__37", "T__36", "T__35", 
		"T__34", "T__33", "T__32", "T__31", "T__30", "T__29", "T__28", "T__27", 
		"T__26", "T__25", "T__24", "T__23", "T__22", "T__21", "T__20", "T__19", 
		"T__18", "T__17", "T__16", "T__15", "T__14", "T__13", "T__12", "T__11", 
		"T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", 
		"T__1", "T__0", "WS", "NULLTOKEN", "EMPTYLISTTOKEN", "WILDCARDTOKEN", 
		"BOOLTOKEN", "NUMTOKEN", "IDTOKEN"
	};


	public CLLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return ""; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\64\u012f\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2"+
		"\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3"+
		"\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f"+
		"\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3"+
		"\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3"+
		"\26\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3"+
		"\34\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3"+
		" \3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3%"+
		"\3%\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3)\3"+
		")\3)\3)\3*\3*\3*\3*\3*\3+\3+\3,\3,\3,\3,\3-\6-\u00ff\n-\r-\16-\u0100\3"+
		"-\3-\3.\3.\7.\u0107\n.\f.\16.\u010a\13.\3.\3.\3/\3/\7/\u0110\n/\f/\16"+
		"/\u0113\13/\3/\3/\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3"+
		"\61\5\61\u0122\n\61\3\62\6\62\u0125\n\62\r\62\16\62\u0126\3\63\3\63\7"+
		"\63\u012b\n\63\f\63\16\63\u012e\13\63\2\2\64\3\3\5\4\7\5\t\6\13\7\r\b"+
		"\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26"+
		"+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S"+
		"+U,W-Y.[/]\60_\61a\62c\63e\64\3\2\6\3\2\"\"\3\2\62;\5\2C\\aac|\6\2\62"+
		";C\\aac|\u0134\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3"+
		"\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2"+
		"\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3"+
		"\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2"+
		"\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\2"+
		"9\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3"+
		"\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2"+
		"\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2"+
		"_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\3g\3\2\2\2\5j\3\2\2\2\7n\3"+
		"\2\2\2\tt\3\2\2\2\13w\3\2\2\2\ry\3\2\2\2\17|\3\2\2\2\21\177\3\2\2\2\23"+
		"\u0081\3\2\2\2\25\u0085\3\2\2\2\27\u0088\3\2\2\2\31\u008b\3\2\2\2\33\u008d"+
		"\3\2\2\2\35\u0093\3\2\2\2\37\u0096\3\2\2\2!\u0098\3\2\2\2#\u009a\3\2\2"+
		"\2%\u009c\3\2\2\2\'\u009e\3\2\2\2)\u00a1\3\2\2\2+\u00a6\3\2\2\2-\u00a9"+
		"\3\2\2\2/\u00ab\3\2\2\2\61\u00ae\3\2\2\2\63\u00b0\3\2\2\2\65\u00b2\3\2"+
		"\2\2\67\u00b4\3\2\2\29\u00b9\3\2\2\2;\u00bb\3\2\2\2=\u00bd\3\2\2\2?\u00c0"+
		"\3\2\2\2A\u00c4\3\2\2\2C\u00ca\3\2\2\2E\u00cf\3\2\2\2G\u00d5\3\2\2\2I"+
		"\u00d8\3\2\2\2K\u00e1\3\2\2\2M\u00e5\3\2\2\2O\u00e7\3\2\2\2Q\u00ee\3\2"+
		"\2\2S\u00f2\3\2\2\2U\u00f7\3\2\2\2W\u00f9\3\2\2\2Y\u00fe\3\2\2\2[\u0104"+
		"\3\2\2\2]\u010d\3\2\2\2_\u0116\3\2\2\2a\u0121\3\2\2\2c\u0124\3\2\2\2e"+
		"\u0128\3\2\2\2gh\7c\2\2hi\7u\2\2i\4\3\2\2\2jk\7h\2\2kl\7w\2\2lm\7p\2\2"+
		"m\6\3\2\2\2no\7y\2\2op\7j\2\2pq\7k\2\2qr\7n\2\2rs\7g\2\2s\b\3\2\2\2tu"+
		"\7~\2\2uv\7~\2\2v\n\3\2\2\2wx\7=\2\2x\f\3\2\2\2yz\7(\2\2z{\7(\2\2{\16"+
		"\3\2\2\2|}\7<\2\2}~\7<\2\2~\20\3\2\2\2\177\u0080\7?\2\2\u0080\22\3\2\2"+
		"\2\u0081\u0082\7h\2\2\u0082\u0083\7q\2\2\u0083\u0084\7t\2\2\u0084\24\3"+
		"\2\2\2\u0085\u0086\7k\2\2\u0086\u0087\7h\2\2\u0087\26\3\2\2\2\u0088\u0089"+
		"\7>\2\2\u0089\u008a\7?\2\2\u008a\30\3\2\2\2\u008b\u008c\7(\2\2\u008c\32"+
		"\3\2\2\2\u008d\u008e\7r\2\2\u008e\u008f\7t\2\2\u008f\u0090\7k\2\2\u0090"+
		"\u0091\7p\2\2\u0091\u0092\7v\2\2\u0092\34\3\2\2\2\u0093\u0094\7f\2\2\u0094"+
		"\u0095\7q\2\2\u0095\36\3\2\2\2\u0096\u0097\7)\2\2\u0097 \3\2\2\2\u0098"+
		"\u0099\7*\2\2\u0099\"\3\2\2\2\u009a\u009b\7,\2\2\u009b$\3\2\2\2\u009c"+
		"\u009d\7.\2\2\u009d&\3\2\2\2\u009e\u009f\7/\2\2\u009f\u00a0\7@\2\2\u00a0"+
		"(\3\2\2\2\u00a1\u00a2\7f\2\2\u00a2\u00a3\7q\2\2\u00a3\u00a4\7p\2\2\u00a4"+
		"\u00a5\7g\2\2\u00a5*\3\2\2\2\u00a6\u00a7\7v\2\2\u00a7\u00a8\7q\2\2\u00a8"+
		",\3\2\2\2\u00a9\u00aa\7<\2\2\u00aa.\3\2\2\2\u00ab\u00ac\7@\2\2\u00ac\u00ad"+
		"\7?\2\2\u00ad\60\3\2\2\2\u00ae\u00af\7]\2\2\u00af\62\3\2\2\2\u00b0\u00b1"+
		"\7>\2\2\u00b1\64\3\2\2\2\u00b2\u00b3\7~\2\2\u00b3\66\3\2\2\2\u00b4\u00b5"+
		"\7y\2\2\u00b5\u00b6\7k\2\2\u00b6\u00b7\7v\2\2\u00b7\u00b8\7j\2\2\u00b8"+
		"8\3\2\2\2\u00b9\u00ba\7_\2\2\u00ba:\3\2\2\2\u00bb\u00bc\7@\2\2\u00bc<"+
		"\3\2\2\2\u00bd\u00be\7q\2\2\u00be\u00bf\7t\2\2\u00bf>\3\2\2\2\u00c0\u00c1"+
		"\7n\2\2\u00c1\u00c2\7g\2\2\u00c2\u00c3\7v\2\2\u00c3@\3\2\2\2\u00c4\u00c5"+
		"\7o\2\2\u00c5\u00c6\7c\2\2\u00c6\u00c7\7v\2\2\u00c7\u00c8\7e\2\2\u00c8"+
		"\u00c9\7j\2\2\u00c9B\3\2\2\2\u00ca\u00cb\7g\2\2\u00cb\u00cc\7n\2\2\u00cc"+
		"\u00cd\7u\2\2\u00cd\u00ce\7g\2\2\u00ceD\3\2\2\2\u00cf\u00d0\7d\2\2\u00d0"+
		"\u00d1\7g\2\2\u00d1\u00d2\7i\2\2\u00d2\u00d3\7k\2\2\u00d3\u00d4\7p\2\2"+
		"\u00d4F\3\2\2\2\u00d5\u00d6\7k\2\2\u00d6\u00d7\7p\2\2\u00d7H\3\2\2\2\u00d8"+
		"\u00d9\7h\2\2\u00d9\u00da\7w\2\2\u00da\u00db\7p\2\2\u00db\u00dc\7e\2\2"+
		"\u00dc\u00dd\7v\2\2\u00dd\u00de\7k\2\2\u00de\u00df\7q\2\2\u00df\u00e0"+
		"\7p\2\2\u00e0J\3\2\2\2\u00e1\u00e2\7g\2\2\u00e2\u00e3\7p\2\2\u00e3\u00e4"+
		"\7f\2\2\u00e4L\3\2\2\2\u00e5\u00e6\7+\2\2\u00e6N\3\2\2\2\u00e7\u00e8\7"+
		"f\2\2\u00e8\u00e9\7q\2\2\u00e9\u00ea\7y\2\2\u00ea\u00eb\7p\2\2\u00eb\u00ec"+
		"\7v\2\2\u00ec\u00ed\7q\2\2\u00edP\3\2\2\2\u00ee\u00ef\7c\2\2\u00ef\u00f0"+
		"\7p\2\2\u00f0\u00f1\7f\2\2\u00f1R\3\2\2\2\u00f2\u00f3\7v\2\2\u00f3\u00f4"+
		"\7j\2\2\u00f4\u00f5\7g\2\2\u00f5\u00f6\7p\2\2\u00f6T\3\2\2\2\u00f7\u00f8"+
		"\7-\2\2\u00f8V\3\2\2\2\u00f9\u00fa\7p\2\2\u00fa\u00fb\7q\2\2\u00fb\u00fc"+
		"\7v\2\2\u00fcX\3\2\2\2\u00fd\u00ff\t\2\2\2\u00fe\u00fd\3\2\2\2\u00ff\u0100"+
		"\3\2\2\2\u0100\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0102\3\2\2\2\u0102"+
		"\u0103\b-\2\2\u0103Z\3\2\2\2\u0104\u0108\7*\2\2\u0105\u0107\t\2\2\2\u0106"+
		"\u0105\3\2\2\2\u0107\u010a\3\2\2\2\u0108\u0106\3\2\2\2\u0108\u0109\3\2"+
		"\2\2\u0109\u010b\3\2\2\2\u010a\u0108\3\2\2\2\u010b\u010c\7+\2\2\u010c"+
		"\\\3\2\2\2\u010d\u0111\7]\2\2\u010e\u0110\t\2\2\2\u010f\u010e\3\2\2\2"+
		"\u0110\u0113\3\2\2\2\u0111\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0114"+
		"\3\2\2\2\u0113\u0111\3\2\2\2\u0114\u0115\7_\2\2\u0115^\3\2\2\2\u0116\u0117"+
		"\7a\2\2\u0117`\3\2\2\2\u0118\u0119\7h\2\2\u0119\u011a\7c\2\2\u011a\u011b"+
		"\7n\2\2\u011b\u011c\7u\2\2\u011c\u0122\7g\2\2\u011d\u011e\7v\2\2\u011e"+
		"\u011f\7t\2\2\u011f\u0120\7w\2\2\u0120\u0122\7g\2\2\u0121\u0118\3\2\2"+
		"\2\u0121\u011d\3\2\2\2\u0122b\3\2\2\2\u0123\u0125\t\3\2\2\u0124\u0123"+
		"\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u0124\3\2\2\2\u0126\u0127\3\2\2\2\u0127"+
		"d\3\2\2\2\u0128\u012c\t\4\2\2\u0129\u012b\t\5\2\2\u012a\u0129\3\2\2\2"+
		"\u012b\u012e\3\2\2\2\u012c\u012a\3\2\2\2\u012c\u012d\3\2\2\2\u012df\3"+
		"\2\2\2\u012e\u012c\3\2\2\2\t\2\u0100\u0108\u0111\u0121\u0126\u012c\3\b"+
		"\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}