// Generated from  by ANTLR 4.2.2

package camllight.parser;
import static camllight.parser.Tokens.*;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CLLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__51=1, T__50=2, T__49=3, T__48=4, T__47=5, T__46=6, T__45=7, T__44=8, 
		T__43=9, T__42=10, T__41=11, T__40=12, T__39=13, T__38=14, T__37=15, T__36=16, 
		T__35=17, T__34=18, T__33=19, T__32=20, T__31=21, T__30=22, T__29=23, 
		T__28=24, T__27=25, T__26=26, T__25=27, T__24=28, T__23=29, T__22=30, 
		T__21=31, T__20=32, T__19=33, T__18=34, T__17=35, T__16=36, T__15=37, 
		T__14=38, T__13=39, T__12=40, T__11=41, T__10=42, T__9=43, T__8=44, T__7=45, 
		T__6=46, T__5=47, T__4=48, T__3=49, T__2=50, T__1=51, T__0=52, WS=53, 
		NULLTOKEN=54, EMPTYLISTTOKEN=55, WILDCARDTOKEN=56, EMPTYVECTORTOKEN=57, 
		BOOLTOKEN=58, NUMTOKEN=59, IDTOKEN=60, CONSTRTOKEN=61;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'fun'", "'while'", "'&&'", "'::'", "'='", "'for'", "'do'", "'('", "'rec'", 
		"','", "'done'", "'mod'", "'>='", "'<'", "']|'", "';;'", "']'", "'|]'", 
		"'let'", "'match'", "'function'", "'downto'", "'then'", "'+'", "'/'", 
		"'as'", "'of'", "'||'", "';'", "'if'", "'<='", "'[|'", "'&'", "'print'", 
		"'''", "'*'", "'->'", "'to'", "':'", "'['", "'|'", "'with'", "'>'", "'or'", 
		"'else'", "'begin'", "'in'", "'end'", "')'", "'and'", "'not'", "'-'", 
		"WS", "NULLTOKEN", "EMPTYLISTTOKEN", "'_'", "EMPTYVECTORTOKEN", "BOOLTOKEN", 
		"NUMTOKEN", "IDTOKEN", "CONSTRTOKEN"
	};
	public static final String[] ruleNames = {
		"T__51", "T__50", "T__49", "T__48", "T__47", "T__46", "T__45", "T__44", 
		"T__43", "T__42", "T__41", "T__40", "T__39", "T__38", "T__37", "T__36", 
		"T__35", "T__34", "T__33", "T__32", "T__31", "T__30", "T__29", "T__28", 
		"T__27", "T__26", "T__25", "T__24", "T__23", "T__22", "T__21", "T__20", 
		"T__19", "T__18", "T__17", "T__16", "T__15", "T__14", "T__13", "T__12", 
		"T__11", "T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", 
		"T__2", "T__1", "T__0", "WS", "NULLTOKEN", "EMPTYLISTTOKEN", "WILDCARDTOKEN", 
		"EMPTYVECTORTOKEN", "BOOLTOKEN", "NUMTOKEN", "IDTOKEN", "CONSTRTOKEN"
	};


	public CLLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return ""; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2?\u0173\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3\5"+
		"\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\13\3\13"+
		"\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\20\3\20"+
		"\3\20\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\25"+
		"\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31"+
		"\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\37"+
		"\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3#\3#\3#\3#\3#\3#\3$\3$\3%\3%\3&"+
		"\3&\3&\3\'\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3+\3+\3+\3,\3,\3-\3-\3-\3."+
		"\3.\3.\3.\3.\3/\3/\3/\3/\3/\3/\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\62"+
		"\3\62\3\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\65\3\65\3\66\6\66\u0130"+
		"\n\66\r\66\16\66\u0131\3\66\3\66\3\67\3\67\7\67\u0138\n\67\f\67\16\67"+
		"\u013b\13\67\3\67\3\67\38\38\78\u0141\n8\f8\168\u0144\138\38\38\39\39"+
		"\3:\3:\3:\3:\7:\u014e\n:\f:\16:\u0151\13:\3:\3:\3:\3;\3;\3;\3;\3;\3;\3"+
		";\3;\3;\5;\u015f\n;\3<\6<\u0162\n<\r<\16<\u0163\3=\3=\7=\u0168\n=\f=\16"+
		"=\u016b\13=\3>\3>\7>\u016f\n>\f>\16>\u0172\13>\2\2?\3\3\5\4\7\5\t\6\13"+
		"\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'"+
		"\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'"+
		"M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:s;u<w=y>{?\3\2\7"+
		"\3\2\"\"\3\2\62;\4\2aac|\6\2\62;C\\aac|\3\2C\\\u017a\2\3\3\2\2\2\2\5\3"+
		"\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2"+
		"\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3"+
		"\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'"+
		"\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63"+
		"\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2"+
		"?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3"+
		"\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2"+
		"\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2"+
		"e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3"+
		"\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\2{\3\2\2\2\3}\3\2\2"+
		"\2\5\u0081\3\2\2\2\7\u0087\3\2\2\2\t\u008a\3\2\2\2\13\u008d\3\2\2\2\r"+
		"\u008f\3\2\2\2\17\u0093\3\2\2\2\21\u0096\3\2\2\2\23\u0098\3\2\2\2\25\u009c"+
		"\3\2\2\2\27\u009e\3\2\2\2\31\u00a3\3\2\2\2\33\u00a7\3\2\2\2\35\u00aa\3"+
		"\2\2\2\37\u00ac\3\2\2\2!\u00af\3\2\2\2#\u00b2\3\2\2\2%\u00b4\3\2\2\2\'"+
		"\u00b7\3\2\2\2)\u00bb\3\2\2\2+\u00c1\3\2\2\2-\u00ca\3\2\2\2/\u00d1\3\2"+
		"\2\2\61\u00d6\3\2\2\2\63\u00d8\3\2\2\2\65\u00da\3\2\2\2\67\u00dd\3\2\2"+
		"\29\u00e0\3\2\2\2;\u00e3\3\2\2\2=\u00e5\3\2\2\2?\u00e8\3\2\2\2A\u00eb"+
		"\3\2\2\2C\u00ee\3\2\2\2E\u00f0\3\2\2\2G\u00f6\3\2\2\2I\u00f8\3\2\2\2K"+
		"\u00fa\3\2\2\2M\u00fd\3\2\2\2O\u0100\3\2\2\2Q\u0102\3\2\2\2S\u0104\3\2"+
		"\2\2U\u0106\3\2\2\2W\u010b\3\2\2\2Y\u010d\3\2\2\2[\u0110\3\2\2\2]\u0115"+
		"\3\2\2\2_\u011b\3\2\2\2a\u011e\3\2\2\2c\u0122\3\2\2\2e\u0124\3\2\2\2g"+
		"\u0128\3\2\2\2i\u012c\3\2\2\2k\u012f\3\2\2\2m\u0135\3\2\2\2o\u013e\3\2"+
		"\2\2q\u0147\3\2\2\2s\u0149\3\2\2\2u\u015e\3\2\2\2w\u0161\3\2\2\2y\u0165"+
		"\3\2\2\2{\u016c\3\2\2\2}~\7h\2\2~\177\7w\2\2\177\u0080\7p\2\2\u0080\4"+
		"\3\2\2\2\u0081\u0082\7y\2\2\u0082\u0083\7j\2\2\u0083\u0084\7k\2\2\u0084"+
		"\u0085\7n\2\2\u0085\u0086\7g\2\2\u0086\6\3\2\2\2\u0087\u0088\7(\2\2\u0088"+
		"\u0089\7(\2\2\u0089\b\3\2\2\2\u008a\u008b\7<\2\2\u008b\u008c\7<\2\2\u008c"+
		"\n\3\2\2\2\u008d\u008e\7?\2\2\u008e\f\3\2\2\2\u008f\u0090\7h\2\2\u0090"+
		"\u0091\7q\2\2\u0091\u0092\7t\2\2\u0092\16\3\2\2\2\u0093\u0094\7f\2\2\u0094"+
		"\u0095\7q\2\2\u0095\20\3\2\2\2\u0096\u0097\7*\2\2\u0097\22\3\2\2\2\u0098"+
		"\u0099\7t\2\2\u0099\u009a\7g\2\2\u009a\u009b\7e\2\2\u009b\24\3\2\2\2\u009c"+
		"\u009d\7.\2\2\u009d\26\3\2\2\2\u009e\u009f\7f\2\2\u009f\u00a0\7q\2\2\u00a0"+
		"\u00a1\7p\2\2\u00a1\u00a2\7g\2\2\u00a2\30\3\2\2\2\u00a3\u00a4\7o\2\2\u00a4"+
		"\u00a5\7q\2\2\u00a5\u00a6\7f\2\2\u00a6\32\3\2\2\2\u00a7\u00a8\7@\2\2\u00a8"+
		"\u00a9\7?\2\2\u00a9\34\3\2\2\2\u00aa\u00ab\7>\2\2\u00ab\36\3\2\2\2\u00ac"+
		"\u00ad\7_\2\2\u00ad\u00ae\7~\2\2\u00ae \3\2\2\2\u00af\u00b0\7=\2\2\u00b0"+
		"\u00b1\7=\2\2\u00b1\"\3\2\2\2\u00b2\u00b3\7_\2\2\u00b3$\3\2\2\2\u00b4"+
		"\u00b5\7~\2\2\u00b5\u00b6\7_\2\2\u00b6&\3\2\2\2\u00b7\u00b8\7n\2\2\u00b8"+
		"\u00b9\7g\2\2\u00b9\u00ba\7v\2\2\u00ba(\3\2\2\2\u00bb\u00bc\7o\2\2\u00bc"+
		"\u00bd\7c\2\2\u00bd\u00be\7v\2\2\u00be\u00bf\7e\2\2\u00bf\u00c0\7j\2\2"+
		"\u00c0*\3\2\2\2\u00c1\u00c2\7h\2\2\u00c2\u00c3\7w\2\2\u00c3\u00c4\7p\2"+
		"\2\u00c4\u00c5\7e\2\2\u00c5\u00c6\7v\2\2\u00c6\u00c7\7k\2\2\u00c7\u00c8"+
		"\7q\2\2\u00c8\u00c9\7p\2\2\u00c9,\3\2\2\2\u00ca\u00cb\7f\2\2\u00cb\u00cc"+
		"\7q\2\2\u00cc\u00cd\7y\2\2\u00cd\u00ce\7p\2\2\u00ce\u00cf\7v\2\2\u00cf"+
		"\u00d0\7q\2\2\u00d0.\3\2\2\2\u00d1\u00d2\7v\2\2\u00d2\u00d3\7j\2\2\u00d3"+
		"\u00d4\7g\2\2\u00d4\u00d5\7p\2\2\u00d5\60\3\2\2\2\u00d6\u00d7\7-\2\2\u00d7"+
		"\62\3\2\2\2\u00d8\u00d9\7\61\2\2\u00d9\64\3\2\2\2\u00da\u00db\7c\2\2\u00db"+
		"\u00dc\7u\2\2\u00dc\66\3\2\2\2\u00dd\u00de\7q\2\2\u00de\u00df\7h\2\2\u00df"+
		"8\3\2\2\2\u00e0\u00e1\7~\2\2\u00e1\u00e2\7~\2\2\u00e2:\3\2\2\2\u00e3\u00e4"+
		"\7=\2\2\u00e4<\3\2\2\2\u00e5\u00e6\7k\2\2\u00e6\u00e7\7h\2\2\u00e7>\3"+
		"\2\2\2\u00e8\u00e9\7>\2\2\u00e9\u00ea\7?\2\2\u00ea@\3\2\2\2\u00eb\u00ec"+
		"\7]\2\2\u00ec\u00ed\7~\2\2\u00edB\3\2\2\2\u00ee\u00ef\7(\2\2\u00efD\3"+
		"\2\2\2\u00f0\u00f1\7r\2\2\u00f1\u00f2\7t\2\2\u00f2\u00f3\7k\2\2\u00f3"+
		"\u00f4\7p\2\2\u00f4\u00f5\7v\2\2\u00f5F\3\2\2\2\u00f6\u00f7\7)\2\2\u00f7"+
		"H\3\2\2\2\u00f8\u00f9\7,\2\2\u00f9J\3\2\2\2\u00fa\u00fb\7/\2\2\u00fb\u00fc"+
		"\7@\2\2\u00fcL\3\2\2\2\u00fd\u00fe\7v\2\2\u00fe\u00ff\7q\2\2\u00ffN\3"+
		"\2\2\2\u0100\u0101\7<\2\2\u0101P\3\2\2\2\u0102\u0103\7]\2\2\u0103R\3\2"+
		"\2\2\u0104\u0105\7~\2\2\u0105T\3\2\2\2\u0106\u0107\7y\2\2\u0107\u0108"+
		"\7k\2\2\u0108\u0109\7v\2\2\u0109\u010a\7j\2\2\u010aV\3\2\2\2\u010b\u010c"+
		"\7@\2\2\u010cX\3\2\2\2\u010d\u010e\7q\2\2\u010e\u010f\7t\2\2\u010fZ\3"+
		"\2\2\2\u0110\u0111\7g\2\2\u0111\u0112\7n\2\2\u0112\u0113\7u\2\2\u0113"+
		"\u0114\7g\2\2\u0114\\\3\2\2\2\u0115\u0116\7d\2\2\u0116\u0117\7g\2\2\u0117"+
		"\u0118\7i\2\2\u0118\u0119\7k\2\2\u0119\u011a\7p\2\2\u011a^\3\2\2\2\u011b"+
		"\u011c\7k\2\2\u011c\u011d\7p\2\2\u011d`\3\2\2\2\u011e\u011f\7g\2\2\u011f"+
		"\u0120\7p\2\2\u0120\u0121\7f\2\2\u0121b\3\2\2\2\u0122\u0123\7+\2\2\u0123"+
		"d\3\2\2\2\u0124\u0125\7c\2\2\u0125\u0126\7p\2\2\u0126\u0127\7f\2\2\u0127"+
		"f\3\2\2\2\u0128\u0129\7p\2\2\u0129\u012a\7q\2\2\u012a\u012b\7v\2\2\u012b"+
		"h\3\2\2\2\u012c\u012d\7/\2\2\u012dj\3\2\2\2\u012e\u0130\t\2\2\2\u012f"+
		"\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u012f\3\2\2\2\u0131\u0132\3\2"+
		"\2\2\u0132\u0133\3\2\2\2\u0133\u0134\b\66\2\2\u0134l\3\2\2\2\u0135\u0139"+
		"\7*\2\2\u0136\u0138\t\2\2\2\u0137\u0136\3\2\2\2\u0138\u013b\3\2\2\2\u0139"+
		"\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013c\3\2\2\2\u013b\u0139\3\2"+
		"\2\2\u013c\u013d\7+\2\2\u013dn\3\2\2\2\u013e\u0142\7]\2\2\u013f\u0141"+
		"\t\2\2\2\u0140\u013f\3\2\2\2\u0141\u0144\3\2\2\2\u0142\u0140\3\2\2\2\u0142"+
		"\u0143\3\2\2\2\u0143\u0145\3\2\2\2\u0144\u0142\3\2\2\2\u0145\u0146\7_"+
		"\2\2\u0146p\3\2\2\2\u0147\u0148\7a\2\2\u0148r\3\2\2\2\u0149\u014a\7]\2"+
		"\2\u014a\u014b\7~\2\2\u014b\u014f\3\2\2\2\u014c\u014e\t\2\2\2\u014d\u014c"+
		"\3\2\2\2\u014e\u0151\3\2\2\2\u014f\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150"+
		"\u0152\3\2\2\2\u0151\u014f\3\2\2\2\u0152\u0153\7~\2\2\u0153\u0154\7_\2"+
		"\2\u0154t\3\2\2\2\u0155\u0156\7h\2\2\u0156\u0157\7c\2\2\u0157\u0158\7"+
		"n\2\2\u0158\u0159\7u\2\2\u0159\u015f\7g\2\2\u015a\u015b\7v\2\2\u015b\u015c"+
		"\7t\2\2\u015c\u015d\7w\2\2\u015d\u015f\7g\2\2\u015e\u0155\3\2\2\2\u015e"+
		"\u015a\3\2\2\2\u015fv\3\2\2\2\u0160\u0162\t\3\2\2\u0161\u0160\3\2\2\2"+
		"\u0162\u0163\3\2\2\2\u0163\u0161\3\2\2\2\u0163\u0164\3\2\2\2\u0164x\3"+
		"\2\2\2\u0165\u0169\t\4\2\2\u0166\u0168\t\5\2\2\u0167\u0166\3\2\2\2\u0168"+
		"\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016az\3\2\2\2"+
		"\u016b\u0169\3\2\2\2\u016c\u0170\t\6\2\2\u016d\u016f\t\5\2\2\u016e\u016d"+
		"\3\2\2\2\u016f\u0172\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171\3\2\2\2\u0171"+
		"|\3\2\2\2\u0172\u0170\3\2\2\2\13\2\u0131\u0139\u0142\u014f\u015e\u0163"+
		"\u0169\u0170\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}