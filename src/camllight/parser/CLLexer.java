// Generated from  by ANTLR 4.2.2

package camllight.parser;
import static camllight.parser.Tokens.*;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CLLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__50=1, T__49=2, T__48=3, T__47=4, T__46=5, T__45=6, T__44=7, T__43=8, 
		T__42=9, T__41=10, T__40=11, T__39=12, T__38=13, T__37=14, T__36=15, T__35=16, 
		T__34=17, T__33=18, T__32=19, T__31=20, T__30=21, T__29=22, T__28=23, 
		T__27=24, T__26=25, T__25=26, T__24=27, T__23=28, T__22=29, T__21=30, 
		T__20=31, T__19=32, T__18=33, T__17=34, T__16=35, T__15=36, T__14=37, 
		T__13=38, T__12=39, T__11=40, T__10=41, T__9=42, T__8=43, T__7=44, T__6=45, 
		T__5=46, T__4=47, T__3=48, T__2=49, T__1=50, T__0=51, WS=52, NULLTOKEN=53, 
		EMPTYLISTTOKEN=54, EMPTYARRAYTOKEN=55, WILDCARDTOKEN=56, BOOLTOKEN=57, 
		NUMTOKEN=58, IDTOKEN=59, CONSTRTOKEN=60;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'fun'", "'while'", "'&&'", "'::'", "'='", "'for'", "'do'", "'('", "'rec'", 
		"','", "'done'", "'mod'", "'>='", "'<'", "';;'", "']'", "'|]'", "'let'", 
		"'match'", "'function'", "'downto'", "'then'", "'+'", "'/'", "'as'", "'of'", 
		"'||'", "';'", "'if'", "'<='", "'[|'", "'&'", "'print'", "'''", "'*'", 
		"'->'", "'to'", "':'", "'['", "'|'", "'with'", "'>'", "'or'", "'else'", 
		"'begin'", "'in'", "'end'", "')'", "'and'", "'not'", "'-'", "WS", "NULLTOKEN", 
		"EMPTYLISTTOKEN", "EMPTYARRAYTOKEN", "'_'", "BOOLTOKEN", "NUMTOKEN", "IDTOKEN", 
		"CONSTRTOKEN"
	};
	public static final String[] ruleNames = {
		"T__50", "T__49", "T__48", "T__47", "T__46", "T__45", "T__44", "T__43", 
		"T__42", "T__41", "T__40", "T__39", "T__38", "T__37", "T__36", "T__35", 
		"T__34", "T__33", "T__32", "T__31", "T__30", "T__29", "T__28", "T__27", 
		"T__26", "T__25", "T__24", "T__23", "T__22", "T__21", "T__20", "T__19", 
		"T__18", "T__17", "T__16", "T__15", "T__14", "T__13", "T__12", "T__11", 
		"T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", 
		"T__1", "T__0", "WS", "NULLTOKEN", "EMPTYLISTTOKEN", "EMPTYARRAYTOKEN", 
		"WILDCARDTOKEN", "BOOLTOKEN", "NUMTOKEN", "IDTOKEN", "CONSTRTOKEN"
	};


	public CLLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return ""; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2>\u016e\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3\5\3\6\3"+
		"\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\13\3\13\3\f\3"+
		"\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\20"+
		"\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26"+
		"\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32"+
		"\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\37\3\37"+
		"\3\37\3 \3 \3 \3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3$\3$\3%\3%\3%\3&\3"+
		"&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3*\3*\3*\3+\3+\3,\3,\3,\3-\3-\3-\3-\3-"+
		"\3.\3.\3.\3.\3.\3.\3/\3/\3/\3\60\3\60\3\60\3\60\3\61\3\61\3\62\3\62\3"+
		"\62\3\62\3\63\3\63\3\63\3\63\3\64\3\64\3\65\6\65\u012b\n\65\r\65\16\65"+
		"\u012c\3\65\3\65\3\66\3\66\7\66\u0133\n\66\f\66\16\66\u0136\13\66\3\66"+
		"\3\66\3\67\3\67\7\67\u013c\n\67\f\67\16\67\u013f\13\67\3\67\3\67\38\3"+
		"8\38\38\78\u0147\n8\f8\168\u014a\138\38\38\38\39\39\3:\3:\3:\3:\3:\3:"+
		"\3:\3:\3:\5:\u015a\n:\3;\6;\u015d\n;\r;\16;\u015e\3<\3<\7<\u0163\n<\f"+
		"<\16<\u0166\13<\3=\3=\7=\u016a\n=\f=\16=\u016d\13=\2\2>\3\3\5\4\7\5\t"+
		"\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23"+
		"%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G"+
		"%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:s;u<w=y>\3"+
		"\2\7\3\2\"\"\3\2\62;\4\2aac|\6\2\62;C\\aac|\3\2C\\\u0175\2\3\3\2\2\2\2"+
		"\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2"+
		"\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2"+
		"\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2"+
		"\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2"+
		"\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2"+
		"\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2"+
		"K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3"+
		"\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2"+
		"\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2"+
		"q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\3{\3\2\2\2\5\177"+
		"\3\2\2\2\7\u0085\3\2\2\2\t\u0088\3\2\2\2\13\u008b\3\2\2\2\r\u008d\3\2"+
		"\2\2\17\u0091\3\2\2\2\21\u0094\3\2\2\2\23\u0096\3\2\2\2\25\u009a\3\2\2"+
		"\2\27\u009c\3\2\2\2\31\u00a1\3\2\2\2\33\u00a5\3\2\2\2\35\u00a8\3\2\2\2"+
		"\37\u00aa\3\2\2\2!\u00ad\3\2\2\2#\u00af\3\2\2\2%\u00b2\3\2\2\2\'\u00b6"+
		"\3\2\2\2)\u00bc\3\2\2\2+\u00c5\3\2\2\2-\u00cc\3\2\2\2/\u00d1\3\2\2\2\61"+
		"\u00d3\3\2\2\2\63\u00d5\3\2\2\2\65\u00d8\3\2\2\2\67\u00db\3\2\2\29\u00de"+
		"\3\2\2\2;\u00e0\3\2\2\2=\u00e3\3\2\2\2?\u00e6\3\2\2\2A\u00e9\3\2\2\2C"+
		"\u00eb\3\2\2\2E\u00f1\3\2\2\2G\u00f3\3\2\2\2I\u00f5\3\2\2\2K\u00f8\3\2"+
		"\2\2M\u00fb\3\2\2\2O\u00fd\3\2\2\2Q\u00ff\3\2\2\2S\u0101\3\2\2\2U\u0106"+
		"\3\2\2\2W\u0108\3\2\2\2Y\u010b\3\2\2\2[\u0110\3\2\2\2]\u0116\3\2\2\2_"+
		"\u0119\3\2\2\2a\u011d\3\2\2\2c\u011f\3\2\2\2e\u0123\3\2\2\2g\u0127\3\2"+
		"\2\2i\u012a\3\2\2\2k\u0130\3\2\2\2m\u0139\3\2\2\2o\u0142\3\2\2\2q\u014e"+
		"\3\2\2\2s\u0159\3\2\2\2u\u015c\3\2\2\2w\u0160\3\2\2\2y\u0167\3\2\2\2{"+
		"|\7h\2\2|}\7w\2\2}~\7p\2\2~\4\3\2\2\2\177\u0080\7y\2\2\u0080\u0081\7j"+
		"\2\2\u0081\u0082\7k\2\2\u0082\u0083\7n\2\2\u0083\u0084\7g\2\2\u0084\6"+
		"\3\2\2\2\u0085\u0086\7(\2\2\u0086\u0087\7(\2\2\u0087\b\3\2\2\2\u0088\u0089"+
		"\7<\2\2\u0089\u008a\7<\2\2\u008a\n\3\2\2\2\u008b\u008c\7?\2\2\u008c\f"+
		"\3\2\2\2\u008d\u008e\7h\2\2\u008e\u008f\7q\2\2\u008f\u0090\7t\2\2\u0090"+
		"\16\3\2\2\2\u0091\u0092\7f\2\2\u0092\u0093\7q\2\2\u0093\20\3\2\2\2\u0094"+
		"\u0095\7*\2\2\u0095\22\3\2\2\2\u0096\u0097\7t\2\2\u0097\u0098\7g\2\2\u0098"+
		"\u0099\7e\2\2\u0099\24\3\2\2\2\u009a\u009b\7.\2\2\u009b\26\3\2\2\2\u009c"+
		"\u009d\7f\2\2\u009d\u009e\7q\2\2\u009e\u009f\7p\2\2\u009f\u00a0\7g\2\2"+
		"\u00a0\30\3\2\2\2\u00a1\u00a2\7o\2\2\u00a2\u00a3\7q\2\2\u00a3\u00a4\7"+
		"f\2\2\u00a4\32\3\2\2\2\u00a5\u00a6\7@\2\2\u00a6\u00a7\7?\2\2\u00a7\34"+
		"\3\2\2\2\u00a8\u00a9\7>\2\2\u00a9\36\3\2\2\2\u00aa\u00ab\7=\2\2\u00ab"+
		"\u00ac\7=\2\2\u00ac \3\2\2\2\u00ad\u00ae\7_\2\2\u00ae\"\3\2\2\2\u00af"+
		"\u00b0\7~\2\2\u00b0\u00b1\7_\2\2\u00b1$\3\2\2\2\u00b2\u00b3\7n\2\2\u00b3"+
		"\u00b4\7g\2\2\u00b4\u00b5\7v\2\2\u00b5&\3\2\2\2\u00b6\u00b7\7o\2\2\u00b7"+
		"\u00b8\7c\2\2\u00b8\u00b9\7v\2\2\u00b9\u00ba\7e\2\2\u00ba\u00bb\7j\2\2"+
		"\u00bb(\3\2\2\2\u00bc\u00bd\7h\2\2\u00bd\u00be\7w\2\2\u00be\u00bf\7p\2"+
		"\2\u00bf\u00c0\7e\2\2\u00c0\u00c1\7v\2\2\u00c1\u00c2\7k\2\2\u00c2\u00c3"+
		"\7q\2\2\u00c3\u00c4\7p\2\2\u00c4*\3\2\2\2\u00c5\u00c6\7f\2\2\u00c6\u00c7"+
		"\7q\2\2\u00c7\u00c8\7y\2\2\u00c8\u00c9\7p\2\2\u00c9\u00ca\7v\2\2\u00ca"+
		"\u00cb\7q\2\2\u00cb,\3\2\2\2\u00cc\u00cd\7v\2\2\u00cd\u00ce\7j\2\2\u00ce"+
		"\u00cf\7g\2\2\u00cf\u00d0\7p\2\2\u00d0.\3\2\2\2\u00d1\u00d2\7-\2\2\u00d2"+
		"\60\3\2\2\2\u00d3\u00d4\7\61\2\2\u00d4\62\3\2\2\2\u00d5\u00d6\7c\2\2\u00d6"+
		"\u00d7\7u\2\2\u00d7\64\3\2\2\2\u00d8\u00d9\7q\2\2\u00d9\u00da\7h\2\2\u00da"+
		"\66\3\2\2\2\u00db\u00dc\7~\2\2\u00dc\u00dd\7~\2\2\u00dd8\3\2\2\2\u00de"+
		"\u00df\7=\2\2\u00df:\3\2\2\2\u00e0\u00e1\7k\2\2\u00e1\u00e2\7h\2\2\u00e2"+
		"<\3\2\2\2\u00e3\u00e4\7>\2\2\u00e4\u00e5\7?\2\2\u00e5>\3\2\2\2\u00e6\u00e7"+
		"\7]\2\2\u00e7\u00e8\7~\2\2\u00e8@\3\2\2\2\u00e9\u00ea\7(\2\2\u00eaB\3"+
		"\2\2\2\u00eb\u00ec\7r\2\2\u00ec\u00ed\7t\2\2\u00ed\u00ee\7k\2\2\u00ee"+
		"\u00ef\7p\2\2\u00ef\u00f0\7v\2\2\u00f0D\3\2\2\2\u00f1\u00f2\7)\2\2\u00f2"+
		"F\3\2\2\2\u00f3\u00f4\7,\2\2\u00f4H\3\2\2\2\u00f5\u00f6\7/\2\2\u00f6\u00f7"+
		"\7@\2\2\u00f7J\3\2\2\2\u00f8\u00f9\7v\2\2\u00f9\u00fa\7q\2\2\u00faL\3"+
		"\2\2\2\u00fb\u00fc\7<\2\2\u00fcN\3\2\2\2\u00fd\u00fe\7]\2\2\u00feP\3\2"+
		"\2\2\u00ff\u0100\7~\2\2\u0100R\3\2\2\2\u0101\u0102\7y\2\2\u0102\u0103"+
		"\7k\2\2\u0103\u0104\7v\2\2\u0104\u0105\7j\2\2\u0105T\3\2\2\2\u0106\u0107"+
		"\7@\2\2\u0107V\3\2\2\2\u0108\u0109\7q\2\2\u0109\u010a\7t\2\2\u010aX\3"+
		"\2\2\2\u010b\u010c\7g\2\2\u010c\u010d\7n\2\2\u010d\u010e\7u\2\2\u010e"+
		"\u010f\7g\2\2\u010fZ\3\2\2\2\u0110\u0111\7d\2\2\u0111\u0112\7g\2\2\u0112"+
		"\u0113\7i\2\2\u0113\u0114\7k\2\2\u0114\u0115\7p\2\2\u0115\\\3\2\2\2\u0116"+
		"\u0117\7k\2\2\u0117\u0118\7p\2\2\u0118^\3\2\2\2\u0119\u011a\7g\2\2\u011a"+
		"\u011b\7p\2\2\u011b\u011c\7f\2\2\u011c`\3\2\2\2\u011d\u011e\7+\2\2\u011e"+
		"b\3\2\2\2\u011f\u0120\7c\2\2\u0120\u0121\7p\2\2\u0121\u0122\7f\2\2\u0122"+
		"d\3\2\2\2\u0123\u0124\7p\2\2\u0124\u0125\7q\2\2\u0125\u0126\7v\2\2\u0126"+
		"f\3\2\2\2\u0127\u0128\7/\2\2\u0128h\3\2\2\2\u0129\u012b\t\2\2\2\u012a"+
		"\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012a\3\2\2\2\u012c\u012d\3\2"+
		"\2\2\u012d\u012e\3\2\2\2\u012e\u012f\b\65\2\2\u012fj\3\2\2\2\u0130\u0134"+
		"\7*\2\2\u0131\u0133\t\2\2\2\u0132\u0131\3\2\2\2\u0133\u0136\3\2\2\2\u0134"+
		"\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0137\3\2\2\2\u0136\u0134\3\2"+
		"\2\2\u0137\u0138\7+\2\2\u0138l\3\2\2\2\u0139\u013d\7]\2\2\u013a\u013c"+
		"\t\2\2\2\u013b\u013a\3\2\2\2\u013c\u013f\3\2\2\2\u013d\u013b\3\2\2\2\u013d"+
		"\u013e\3\2\2\2\u013e\u0140\3\2\2\2\u013f\u013d\3\2\2\2\u0140\u0141\7_"+
		"\2\2\u0141n\3\2\2\2\u0142\u0143\7]\2\2\u0143\u0144\7~\2\2\u0144\u0148"+
		"\3\2\2\2\u0145\u0147\t\2\2\2\u0146\u0145\3\2\2\2\u0147\u014a\3\2\2\2\u0148"+
		"\u0146\3\2\2\2\u0148\u0149\3\2\2\2\u0149\u014b\3\2\2\2\u014a\u0148\3\2"+
		"\2\2\u014b\u014c\7~\2\2\u014c\u014d\7_\2\2\u014dp\3\2\2\2\u014e\u014f"+
		"\7a\2\2\u014fr\3\2\2\2\u0150\u0151\7h\2\2\u0151\u0152\7c\2\2\u0152\u0153"+
		"\7n\2\2\u0153\u0154\7u\2\2\u0154\u015a\7g\2\2\u0155\u0156\7v\2\2\u0156"+
		"\u0157\7t\2\2\u0157\u0158\7w\2\2\u0158\u015a\7g\2\2\u0159\u0150\3\2\2"+
		"\2\u0159\u0155\3\2\2\2\u015at\3\2\2\2\u015b\u015d\t\3\2\2\u015c\u015b"+
		"\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u015c\3\2\2\2\u015e\u015f\3\2\2\2\u015f"+
		"v\3\2\2\2\u0160\u0164\t\4\2\2\u0161\u0163\t\5\2\2\u0162\u0161\3\2\2\2"+
		"\u0163\u0166\3\2\2\2\u0164\u0162\3\2\2\2\u0164\u0165\3\2\2\2\u0165x\3"+
		"\2\2\2\u0166\u0164\3\2\2\2\u0167\u016b\t\6\2\2\u0168\u016a\t\5\2\2\u0169"+
		"\u0168\3\2\2\2\u016a\u016d\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c\3\2"+
		"\2\2\u016cz\3\2\2\2\u016d\u016b\3\2\2\2\13\2\u012c\u0134\u013d\u0148\u0159"+
		"\u015e\u0164\u016b\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}